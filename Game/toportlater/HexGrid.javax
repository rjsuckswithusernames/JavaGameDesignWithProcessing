// HexGrid Class
// Modified from CSRessel's Catan Game & JABianchi's Grid class:
// Refined by Naomi Cordero & Ezzeldin Moussa, June 2022
// https://github.com/CSRessel/catan/blob/master/src/gui/CatanBoard.java


import javax.swing.*;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Font;
import java.awt.RenderingHints;
import java.awt.Color;
import java.awt.Polygon;
import java.awt.Point;
import java.awt.geom.Ellipse2D;
import javax.imageio.*;
import java.awt.image.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import java.util.ArrayList;


public class HexGrid extends JComponent implements KeyListener, MouseListener {

	ArrayList<Location> allHexLocations;
	ArrayList<Location> unclaimedLocations;
	
    private HexTile[][] map;
    private Color defaultOutlineColor = Color.WHITE;
    private Color defaultFillColor = Color.BLACK;
	
    private JFrame frame;
	private int lastKeyPressed;
	private Location lastLocationClicked;
	private BufferedImage backgroundImage;
	private boolean bgSet = false;

    //GUI fields
	private int hexGen;
	private int boardHeight;
	private int hexagonSide;
	private int heightMargin = 100;
	private int widthMargin;
	private final double sqrt3div2 = 0.86602540378;

    //HexGrid Constructor
    public HexGrid(int hexGen){

		this.hexGen = hexGen;

		//Generate all the valid hexLocations
		allHexLocations = new ArrayList<Location>();
        
		int hexDiameter = hexGen *2 -1;	//originally 5
		int midHex = hexGen;	//originally 3
		System.out.println("mid:" + midHex);

		for(int r=1; r <= midHex; r++){
			for(int c=1; c <= midHex + r - 1; c++){
				allHexLocations.add( new Location(c,r) );
			}
		}
		for(int r = midHex +1; r <= hexDiameter; r++){
			for(int c= r-midHex + 1; c <= hexDiameter; c++){
				allHexLocations.add( new Location(c,r) );
			}
		}
		
		//System.out.println(hexLocations);

		//Construct 2D array of HexTiles
		int row = hexDiameter + 2;
		int col = row;
        map = new HexTile[row][col];    //<-default paintComponent method requires at least a 6x6 grid

		//Initialize unclaimed Locations arrayList
		unclaimedLocations = new ArrayList<Location>();

		for(Location loc: allHexLocations){

			//Generate hexTiles for each Location
			HexTile hTile = new HexTile(loc);
			map[loc.getYCoord()][loc.getXCoord()] = hTile;
			hTile.setColor(defaultFillColor);
			hTile.setOutlineColor(defaultOutlineColor);
			setHexTilePoly(hTile);

			//Generate unclaimedTiles ArrayList
			unclaimedLocations.add(loc);

		}
		
		//Initialize the GUI
		guiInit();
    }

	public boolean isValidLocation(Location testLoc){
		for(int i=0; i<unclaimedLocations.size(); i++){
			if(unclaimedLocations.get(i).equals(testLoc)){
				return true;
			}
		}
		return false;
	}

	public boolean isWithinOne(Location start, Location end){
		int startX = start.getXCoord();
		int startY = start.getYCoord();
		int endX = end.getXCoord();
		int endY = end.getYCoord();

		if(endX==startX+1 || endX==startX-1 || endX==startX){
			if(endY==startY+1 || endY==startY-1 || endY==startY){
				return true;
			}
		}
		return false;
	}

	public boolean isWithinTwo(Location start, Location end){
		int startX = start.getXCoord();
		int startY = start.getYCoord();
		int endX = end.getXCoord();
		int endY = end.getYCoord();

		if(endX==startX+2 || endX==startX+1 || endX==startX-2 || endX==startX-1 || endX==startX){
			if(endY==startY+2 || endY==startY+1 || endY==startY-2 || endY==startY-1 || endY==startY){
				return true;
			}
		}
		return false;
	}

	public void removeHexLocation(Location loc){
		for(int i=0; i<unclaimedLocations.size(); i++){
      		if(unclaimedLocations.get(i).equals(loc)){
        		unclaimedLocations.remove(i);
				return;
			}
		}
		System.out.println("Error when trying to remove Location: " + loc);
	}


    public void paintComponent(Graphics g) {

        int mapHeight = map.length;
        //int hexagonSide = 50;
		//int hexagonSide = (mapHeight - 2 * heightMargin) / 8;
        int widthMargin = (getWidth() - (int) (10 * hexagonSide * sqrt3div2)) / 2;

        Graphics2D g2 = (Graphics2D)g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g.setFont(new Font("TimesRoman", Font.PLAIN, 20));
        // super.paintComponent(g2);

		//System.out.println("ahl size: " + allHexLocations.size());
		for(Location loc: allHexLocations){
			int x = loc.getXCoord();
			int y = loc.getYCoord();
			HexTile hTile = map[x][y];
			//System.out.println(hTile);
			try {
				drawHex(hTile,g2);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		for(Location loc: allHexLocations){
			int x = loc.getXCoord();
			int y = loc.getYCoord();
			HexTile hTile = map[x][y];
			drawHexOutline(hTile,g2);
		}

		super.paintComponent(g2);

		//System.out.println("HexLocations: " + hexLocations);
    }

	public void setHexTilePoly(HexTile tile){
		int x = tile.getLocation().getXCoord();
        int y = tile.getLocation().getYCoord();
        Polygon hexPoly = makeHex(findCenter(x,y));
		tile.setHexPoly(hexPoly);
	}

    public void drawHex(HexTile tile, Graphics2D g2) throws IOException {

		setHexTilePoly(tile);
		Polygon poly = tile.getHexPoly();

        final String locImageName = tile.getImageFileName();
        boolean hasImage = (locImageName != null);
        //hasImage = false;
		//System.out.println("drawHex: x:"+tile.getLocation().getXCoord()+",y:"+tile.getLocation().getYCoord());
		
        //fill in hexTile with a solid color if no picture
        g2.setColor(tile.getColor());
        g2.fillPolygon(poly);

		//default outline color
		g2.setColor(defaultOutlineColor);
		g2.setStroke(new BasicStroke((float)3));
        g2.drawPolygon(poly);
    
        //fill in the hexTile with a picture
        if(hasImage){    

			//asldkfj

			BufferedImage bimage = loadImage(locImageName);
            // final URL url = getClass().getResource(locImageName);
            // if (url == null){
            //     System.out.println("File not found:  " + locImageName);
            // } else {
            //     final Image image = new ImageIcon(url).getImage();
			// 	BufferedImage bimage = toBufferedImage(image);
				 try{
					int iSize = (int) (hexagonSide * 1.25);
					bimage = resizeImage(bimage, iSize, iSize);
					final int ix = getImageX(tile, bimage);
					final int iy = getImageY(tile, bimage);
					
					//System.out.println("Img: " + locImageName);
					//System.out.println("nPoints:" + poly.npoints);
					//System.out.println("ix:" + ix + "\tiy:"+iy);
					
					g2.setClip(poly);
					g2.drawImage(bimage, ix, iy, null);
					//System.out.println("Drew image for x:" + x + ",y:" + y);
					g2.setClip(null);
				} catch(Exception e){

				}
            
           // }
        }
	}

	//https://www.baeldung.com/java-resize-image
	BufferedImage resizeImage(BufferedImage originalImage, int targetWidth, int targetHeight){
		BufferedImage resizedImage = new BufferedImage(targetWidth, targetHeight, BufferedImage.TYPE_INT_RGB);
		Graphics2D graphics2D = resizedImage.createGraphics();
		graphics2D.drawImage(originalImage, 0, 0, targetWidth, targetHeight, null);
		graphics2D.dispose();
		return resizedImage;
	}

	/**
	 * Converts a given Image into a BufferedImage
	 *
	 * @param img The Image to be converted
	 * @return The converted BufferedImage
	 * https://stackoverflow.com/questions/13605248/java-converting-image-to-bufferedimage
	 */
	public static BufferedImage toBufferedImage(Image img)
	{
		if (img instanceof BufferedImage)
		{
			return (BufferedImage) img;
		}

		// Create a buffered image with transparency
		BufferedImage bimage = new BufferedImage(img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB);

		// Draw the image on to the buffered image
		Graphics2D bGr = bimage.createGraphics();
		bGr.drawImage(img, 0, 0, null);
		bGr.dispose();

		// Return the buffered image
		return bimage;
	}

	public void drawHexOutline(HexTile tile, Graphics2D g2) {

		Color outlineColor = tile.getOutlineColor();
		
		if(!outlineColor.equals(defaultOutlineColor)){
			setHexTilePoly(tile);
			Polygon poly = tile.getHexPoly();
			g2.setColor(tile.getOutlineColor());
			g2.setStroke(new BasicStroke((float)3));
			g2.drawPolygon(poly);
		}
	}


    private int getImageX(HexTile tile, Image image){
        int xcoord = tile.getLocation().getXCoord();
        int ycoord = tile.getLocation().getYCoord();
        Point center = findCenter(xcoord, ycoord);
        int imageWidth =  image.getWidth(null);
        return center.x - imageWidth/2; 
    }
    private int getImageY(HexTile tile, Image image){        
        int xcoord = tile.getLocation().getXCoord();
        int ycoord = tile.getLocation().getYCoord();
        Point center = findCenter(xcoord, ycoord);
        int imageHeight =  image.getHeight(null);
        return center.y - imageHeight/2; 
    }

	public Polygon makeHex(Point center) {
		int xCenter = (int) center.getX();
		int yCenter = (int) center.getY();

		Polygon output = new Polygon();
		output.addPoint(xCenter + 1, yCenter + hexagonSide + 1);
		output.addPoint(xCenter + (int) (hexagonSide * sqrt3div2) + 1, yCenter + (int) (.5 * hexagonSide) + 1);
		output.addPoint(xCenter + (int) (hexagonSide * sqrt3div2) + 1, yCenter - (int) (.5 * hexagonSide) - 1);
		output.addPoint(xCenter + 1, yCenter - hexagonSide - 1);
		output.addPoint(xCenter - (int) (hexagonSide * sqrt3div2) - 1, yCenter - (int) (.5 * hexagonSide) - 1);
		output.addPoint(xCenter - (int) (hexagonSide * sqrt3div2) - 1, yCenter + (int) (.5 * hexagonSide) + 1);

		return output;
	}

    //MUTATOR METHODS
    public void setAllTileColors(Color tileColor){
        this.defaultFillColor = tileColor;
          for (int r = 0; r < map.length; r++) {
            for (int c = 0; c < map[0].length; c++) {
                if (map[r][c] != null){
                    map[r][c].setColor(defaultFillColor);
                }
            }
        }


    }

	public void setAllTileOutlines(Color outlineColor){
        this.defaultFillColor = outlineColor;
          for (int r = 0; r < map.length; r++) {
            for (int c = 0; c < map[0].length; c++) {
                if (map[r][c] != null){
                    map[r][c].setOutlineColor(defaultFillColor);
                }
            }
        }


    }

    public Color setTileColor(Location loc, Color tileColor){
		int x = loc.getXCoord();
		int y = loc.getYCoord();
        Color oldColor = map[x][y].getColor();
        map[x][y].setColor(tileColor);
		repaint();
        return oldColor;
    }

	public void highlightTile(Location loc, Graphics2D g2) {
		//System.out.println("Highlighted");
		int x = loc.getXCoord();
		int y = loc.getYCoord();
		// if (map[x][y].hasRobber()) {
		// 	return;
		// }
		Point p = findCenter(x,y);
		Shape shape = new Ellipse2D.Double((int)p.getX() - 25, (int)p.getY() - 25, 50, 50);

		g2.setColor(Color.WHITE);
		g2.fill(shape);
		g2.draw(shape);
	}
    
	//this method determines how the grid is arranged
	public Point findCenter(int x, int y){
		//code for a bottom left origin with rows as x and cols as y
		// int xCenter = widthMargin + (int) (3 * hexagonSide * sqrt3div2)
		// 		+ (int) ((x - 1) * 2 * hexagonSide * sqrt3div2)
		// 		- (int) ((y - 1) * hexagonSide * sqrt3div2);
		// int yCenter = boardHeight - (heightMargin + hexagonSide
		// 		+ (int) ((y - 1) * hexagonSide * 1.5));

		//code for a top left origin (to mimic how Java 2D arrays are modeled) with rows as y and cols as x
		int xCenter = widthMargin + (int) (3 * hexagonSide * sqrt3div2)
		+ (int) ((x - 1) * 2 * hexagonSide * sqrt3div2)
		- (int) ((y - 1) * hexagonSide * sqrt3div2);
		
		int yCenter = (heightMargin + hexagonSide
		+ (int) ((y - 1) * hexagonSide * 1.5));

		return new Point(xCenter,yCenter);
	}



/*
	public Location pxToTile(Point p) {
		double x = p.getX();
		double y = p.getY();

		int xCoord = 0,
			yCoord = 0;
//
//		// Out of bounds
//		if (x < widthMargin || x > widthMargin + 2 * 5 * sqrt3div2 || y < heightMargin || y > heightMargin + 8 * hexagonSide) {
//			System.out.println("this null");
//			return null;
//		}
			
		// first horizontal band
		if (heightMargin + hexagonSide / 2 < y && y < heightMargin + 3 * hexagonSide / 2) {
			if (x < widthMargin + hexagonSide * 2 * sqrt3div2 || x > widthMargin + 4 * hexagonSide * 2 * sqrt3div2) {
				//System.out.println("no this null");
				return null;
			}
			yCoord = 5;
			if (x > widthMargin + 2 * hexagonSide * sqrt3div2 && x < widthMargin + 2 * (2 * hexagonSide * sqrt3div2))
				xCoord = 3;
			else if (x > widthMargin + 2 * (2 * hexagonSide * sqrt3div2) && x < widthMargin + 3 * (2 * hexagonSide * sqrt3div2))
				xCoord = 4;
			else if (x > widthMargin + 3 * (2 * hexagonSide * sqrt3div2) && x < widthMargin + 4 * (2 * hexagonSide * sqrt3div2))
				xCoord = 5;
		}
		// third horizontal band
		else if (heightMargin + 7 * hexagonSide / 2 < y && y < heightMargin + 9 * hexagonSide / 2) {
			yCoord = 3;
			if (widthMargin < x && x < widthMargin + 2 * hexagonSide * sqrt3div2)
				xCoord = 1;
			else if (x > widthMargin + 2 * hexagonSide * sqrt3div2 && x < widthMargin + 4 * hexagonSide * sqrt3div2)
				xCoord = 2;
			else if (x > widthMargin + 4 * hexagonSide * sqrt3div2 && x < widthMargin + 6 * hexagonSide * sqrt3div2)
				xCoord = 3;
			else if (x > widthMargin + 6 * hexagonSide * sqrt3div2 && x < widthMargin + 8 * hexagonSide * sqrt3div2)
				xCoord = 4;
			else if (x > widthMargin + 8 * hexagonSide * sqrt3div2 && x < widthMargin + 10 * hexagonSide * sqrt3div2)
				xCoord = 5;
		}
		// fifth horizontal band
		else if (heightMargin + 13 * hexagonSide / 2 < y && y < heightMargin + 15 * hexagonSide / 2) {
			yCoord = 1;
			if (x > widthMargin + 2 * hexagonSide * sqrt3div2 && x < widthMargin + 2 * (2 * hexagonSide * sqrt3div2))
				xCoord = 1;
			else if (x > widthMargin + 2 * (2 * hexagonSide * sqrt3div2) && x < widthMargin + 3 * (2 * hexagonSide * sqrt3div2))
				xCoord = 2;
			else if (x > widthMargin + 3 * (2 * hexagonSide * sqrt3div2) && x < widthMargin + 4 * (2 * hexagonSide * sqrt3div2))
				xCoord = 3;
			else {
				//System.out.println("You guys got it all wrong, it's this null");
				return null;
			}
		}


		// second horizontal band
		if (heightMargin + 2 * hexagonSide < y && y < heightMargin + 3 * hexagonSide) {
			yCoord = 4;
			if (widthMargin + hexagonSide * sqrt3div2 < x && x < widthMargin + hexagonSide * sqrt3div2 * 3)
				xCoord = 2;
			else if (widthMargin + hexagonSide * sqrt3div2 * 3 < x && x < widthMargin + hexagonSide * sqrt3div2 * 5)
				xCoord = 3;
			else if (widthMargin + hexagonSide * sqrt3div2 * 5 < x && x < widthMargin + hexagonSide * sqrt3div2 * 7)
				xCoord = 4;
			else if (widthMargin + hexagonSide * sqrt3div2 * 7 < x && x < widthMargin + hexagonSide * sqrt3div2 * 9)
				xCoord = 5;
			else
				return null;
		}
		// fourth horizontal band
		else if (heightMargin + 5 * hexagonSide < y && y < heightMargin + 6 * hexagonSide) {
			yCoord = 2;
			if (widthMargin + hexagonSide * sqrt3div2 < x && x < widthMargin + hexagonSide * sqrt3div2 * 3)
				xCoord = 1;
			else if (widthMargin + hexagonSide * sqrt3div2 * 3 < x && x < widthMargin + hexagonSide * sqrt3div2 * 5)
				xCoord = 2;
			else if (widthMargin + hexagonSide * sqrt3div2 * 5 < x && x < widthMargin + hexagonSide * sqrt3div2 * 7)
				xCoord = 3;
			else if (widthMargin + hexagonSide * sqrt3div2 * 7 < x && x < widthMargin + hexagonSide * sqrt3div2 * 9)
				xCoord = 4;
			else
				return null;
		}

		if (xCoord == 0 || yCoord == 0) {
			//System.out.println("I AM THE TRUE NULL");
			return null;
		}

		return new Location(xCoord, yCoord);
	}

    */


    /* ---------------  HEX GRID ACCESSOR METHODS ------------------ */
	public HexTile[][] getMap(){
        return map;
    }
    
    public int getNumRows() {
		return map.length;
	}

	public int getNumCols() {
		return map[0].length;
	}

    //needs to be modified slightly because HexGrid doesn't include ALL tiles in the rectangle (like 0,0)
	public boolean isValid(final Location loc) {
		final int row = loc.getYCoord();
		final int col = loc.getXCoord();
		return 0 <= row && row < getNumRows() && 0 <= col && col < getNumCols();
	}


    /* ---------------- BACKGROUND IMAGE METHODS ------------------------- */



	/**
	 * sets the background to imgName. The img is resized to fit in the grids
	 * dimensions. setColor() is disabled
	 * 
	 * @param imgName
	 */
	public void setBackground(final String imgName) {
		// this.xOffset = 0;
		// this.yOffset = 0;
		// this.xScale = 1.0;
		// this.yScale = 1.0;

		backgroundImage = loadImage(imgName);
		bgSet = true;

		repaint();
	}

	/**
	 * Removes a regular background or moveable background, allowing setColor to
	 * work again.
	 */
	public void removeBackground() {
		bgSet = false;
	}



	public void setFillColor(final Location loc, final Color color) {
		if (!isValid(loc))
			throw new RuntimeException("cannot set color of invalid location " + loc + " to color " + color);
		map[loc.getXCoord()][loc.getYCoord()].setColor(color);
		repaint();
	}

	public Color getFillColor(final Location loc) {
		if (!isValid(loc))
			throw new RuntimeException("cannot get color from invalid location " + loc);
		return map[loc.getYCoord()][loc.getXCoord()].getColor();
	}

	public void setImage(final Location loc, final String imageFileName) {
		if (!isValid(loc))
			throw new RuntimeException(
					"cannot set image for invalid location " + loc + " to \"" + imageFileName + "\"");
		map[loc.getXCoord()][loc.getYCoord()].setImageFileName(imageFileName);
		repaint();
	}

	public String getImage(final Location loc) {
		if (!isValid(loc))
			throw new RuntimeException("cannot get image for invalid location " + loc);
		return map[loc.getYCoord()][loc.getXCoord()].getImageFileName();
	}

	public void setTileOutlineColor(final Location loc, final Color oc) {
		if (!isValid(loc))
			throw new RuntimeException("cannot set outline for invalid location " + loc);
            map[loc.getXCoord()][loc.getYCoord()].setOutlineColor(oc);
		repaint();
	}

	public Color getTileOutlineColor(final Location loc) {
		if (!isValid(loc))
			throw new RuntimeException("cannot get outline color for invalid location " + loc);
		return map[loc.getXCoord()][loc.getYCoord()].getOutlineColor();
	}

	public void setAllOutlinesColor(final Color oc) {
		for (int r = 0; r < getNumRows(); r++) {
			for (int c = 0; c < getNumCols(); c++) {
				map[r][c].setOutlineColor(oc);
			}
		}
		repaint();
	}



    /* ----- INPUT HANDLING -------------------------------------------------------------------- */
	// returns -1 if no key pressed since last call.
	// otherwise returns the code for the last key pressed.
	public int checkLastKeyPressed() {
		final int key = lastKeyPressed;
		lastKeyPressed = -1;
		return key;
	}

	// returns null if no location clicked since last call.
	public Location checkLastLocationClicked() {
		final Location loc = lastLocationClicked;
		lastLocationClicked = null;
		return loc;
	}

	public Location waitForClick() {
		while (true) {
			final Location clicked = this.checkLastLocationClicked();
			if (clicked != null) {
				//System.out.print("x:"+clicked.getXCoord()+ ",y:" + clicked.getYCoord());
				return clicked;
			} else {
				//System.out.print("NOT CLICKED");
				HexGrid.pause(100);
			}
		}
	}

    public static void pause(final int milliseconds) {
		try {
			Thread.sleep(milliseconds);
		} catch (final Exception e) {
			// ignore
		}
	}

    public void keyPressed(final KeyEvent e) {
		lastKeyPressed = e.getKeyCode();
	}

	public void mousePressed(final MouseEvent e) {

		Point p = e.getPoint();
		//System.out.println(p);
		
		for(Location loc : this.allHexLocations){
			HexTile hTile = map[loc.getXCoord()][loc.getYCoord()];
			Polygon hexPoly = hTile.getHexPoly();
			if(hexPoly.contains(p)){
				
				lastLocationClicked = loc;
				
			}
		}
	}


	@Override
	public void mouseReleased(final MouseEvent e) {
		// ignore
	}

	@Override
	public void mouseClicked(final MouseEvent e) {
		// ignore
	}

	@Override
	public void mouseEntered(final MouseEvent e) {
		// ignore
	}

	@Override
	public void mouseExited(final MouseEvent e) {
		// ignore
	}

	@Override
	public void keyTyped(final KeyEvent e) {
		//ignore
	}
	
	public void keyReleased(final KeyEvent e) {
		// ignored
	}


    /* -------------- GENERIC JAVA GUI COMPONENTS -------------------------------------------------------------------- */
	public String showInputDialog(final String message) {
		return JOptionPane.showInputDialog(this, message);
	}

	public void showMessageDialog(final String message) {
		JOptionPane.showMessageDialog(this, message);
	}

	public void setTitle(final String title) {
		frame.setTitle(title);
	}

	public void fullscreen() {
		frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
	}

	public void close() {
		frame.dispose();
	}

    // ------------------ GUI HELPER METHODS --------------------------------------------------------------------------//

    private void guiInit() {
        lastKeyPressed = -1;
        lastLocationClicked = null;

        frame = new JFrame("Grid");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		fullscreen();	//makes the it stay on the left??
        frame.addKeyListener(this);

        int mapSize = Math.max(Math.min(500 / getNumRows(), 500 / getNumCols()), 1);
        setPreferredSize(new Dimension(mapSize * getNumCols(), mapSize * getNumRows()));
        addMouseListener(this);
        frame.getContentPane().add(this);

        frame.pack();
        frame.setVisible(true);

		setBackground(new Color(164,200,218)); //TODO add background

		boardHeight = getHeight();
		hexagonSide = 250 / (hexGen + 2);
		//hexagonSide = 25;
		//hexagonSide = (boardHeight - 2 * heightMargin) / 8;
		widthMargin = (getWidth() - (int) (10 * hexagonSide * sqrt3div2)) / 2;
		System.out.println("Boardheight: " + boardHeight);
		System.out.println("HexagonSide: " + hexagonSide);
		System.out.println("WidthMargin: " + widthMargin);

		this.addComponentListener(new ComponentListener() {

    		public void componentResized(ComponentEvent e) {
    		//	System.out.println(e.getComponent().getSize());
    			boardHeight = getHeight();
    			//hexagonSide = (boardHeight - 2 * heightMargin) / 8;
    			widthMargin = (getWidth() - (int) (10 * hexagonSide * sqrt3div2)) / 2;
    			//System.out.println("Boardheight: " + boardHeight);
    			//System.out.println("HexagonSide: " + hexagonSide);
    			//System.out.println("WidthMargin: " + widthMargin);
    		}

    		public void componentHidden(ComponentEvent e) {}

    		public void componentMoved(ComponentEvent e) {}

    		public void componentShown(ComponentEvent e) {}
    	});

    }

    private void load(String imageFileName) {
        showFullImage(loadImage(imageFileName));
        setTitle(imageFileName);
    }

    private void save(String imageFileName) {
        try {
            BufferedImage bi = new BufferedImage(getWidth(), getHeight(), BufferedImage.TYPE_INT_RGB);
            paintComponent(bi.getGraphics());
            int index = imageFileName.lastIndexOf('.');
            if (index == -1)
                throw new RuntimeException("invalid image file name:  " + imageFileName);
            ImageIO.write(bi, imageFileName.substring(index + 1), new File(imageFileName));
        } catch ( IOException e) {
            throw new RuntimeException("unable to save image to file:  " + imageFileName);
        }
    }

	private BufferedImage loadImage(String imageFileName) {
		
		if(imageFileName == null || "".equals(imageFileName)){
			System.out.println("Image is null or \"\"");
			return null;
		} else{
			final URL url = getClass().getResource(imageFileName);
			if (url == null) {
				throw new RuntimeException("cannot find file:  " + imageFileName);
			}
			try {
				return ImageIO.read(url);
			} catch (IOException e) {
				throw new RuntimeException("unable to read from file:  " + imageFileName);
			}
		}
	}


    private void showFullImage(BufferedImage image) {
        for (int row = 0; row < getNumRows(); row++) {
            for (int col = 0; col < getNumCols(); col++) {
                int x = col * image.getWidth() / getNumCols();
                int y = row * image.getHeight() / getNumRows();
                int c = image.getRGB(x, y);

                int red = (c & 0x00ff0000) >> 16;
                int green = (c & 0x0000ff00) >> 8;
                int blue = c & 0x000000ff;

                map[row][col].setColor(new Color(red, green, blue));
            }
        }
        repaint();
    }

}  